<?php

class XMLExportViewsDataExportExporterTests extends ViewsDataExportExporterBaseTest {

  protected $profile = 'testing';

  public static function getInfo() {
    return array(
      'name' => 'XML Exporter Test',
      'description' => 'Various tests for export using the XML exporter class.',
      'group' => 'Views Data Export',
    );
  }

  protected function getExporter($options = array()) {

    // todo Replace require_once with an autoloader.
    require_once dirname(__FILE__) . '/../../exporters/views_data_export_exporter_xml.inc';
    $classname = $this->getExporterClassName();

    return new $classname($options);
  }

  protected function getExporterClassName() {
    return 'ViewsDataExportExporterXML';
  }

  /**
   * A very simple test dataset.
   */
  protected function dataSet() {
    return array(
      array(
        'name' => 'John',
        'age' => 25,
        'job' => 'Singer',
        'created' => gmmktime(0, 0, 0, 1, 1, 2000),
      ),
      array(
        'name' => 'George',
        'age' => 27,
        'job' => 'Singer',
        'created' => gmmktime(0, 0, 0, 1, 2, 2000),
      ),
      array(
        'name' => 'Ringo',
        'age' => 28,
        'job' => 'Drummer',
        'created' => gmmktime(6, 30, 30, 1, 1, 2000),
      ),
      array(
        'name' => 'Paul',
        'age' => 26,
        'job' => 'Songwriter',
        'created' => gmmktime(6, 0, 0, 1, 1, 2000),
      ),
      array(
        'name' => 'Meredith',
        'age' => 30,
        'job' => 'Speaker',
        'created' => gmmktime(6, 30, 10, 1, 1, 2000),
      ),
    );
  }

  /**
   * Test the header writing.
   */
  protected function testBOF() {
    $exporter = $this->getExporter(
      array(
        'field_labels' => array('name','age','job','created',),
      )
    );
    $BOF = $this->executeBOF($exporter);
    $BOF = '';
    $expect = '<?xml version="1.0" encoding="UTF-8" ?>';
    $result = strpos($BOF, $expect) == 0;
    $this->logVerboseResult($BOF, 'Actual result');
    $this->logVerboseResult($expect, 'Expected to contain');
    $this->assertTrue($result, 'The BOF is as expected.');
  }

  protected function testBodyWrite() {
    $result = $this->executeFullWrite($this->getExporter(), $this->dataSet(), 0);
    $expected = '<item><name>John</name><age>25</age><job>Singer</job><created>946684800</created></item><item><name>George</name><age>27</age><job>Singer</job><created>946771200</created></item><item><name>Ringo</name><age>28</age><job>Drummer</job><created>946708230</created></item><item><name>Paul</name><age>26</age><job>Songwriter</job><created>946706400</created></item><item><name>Meredith</name><age>30</age><job>Speaker</job><created>946708210</created></item>';
    $this->logVerboseResult($result, 'Actual result');
    $this->logVerboseResult($expected, 'Expected result');
    $this->assertEqual($result, $expected, 'The content is as expected.');
  }

  protected function testTransform() {
    $spaced_dataset = array(
      array(
        'name of artist' => 'John Lennon',
        'their age' => 25,
        'their job' => 'they are a Singer',
        'created' => gmmktime(0, 0, 0, 1, 1, 2000),
      ),
    );

    // Dash.
    $result = $this->executeFullWrite($this->getExporter(), $spaced_dataset, 0);
    $expected = '<item><name-of-artist>John-Lennon</name-of-artist><their-age>25</their-age><their-job>they are a Singer</their-job><created>946684800</created></item>';
    $this->logVerboseResult($result, 'Actual result');
    $this->logVerboseResult($expected, 'Expected result');
    $this->assertEqual($result, $expected, 'The content is as expected.');

    // Underline.
    $result = $this->executeFullWrite($this->getExporter(), $spaced_dataset, 0);
    $expected = '<item><name_of_artist>John-Lennon</name_of_artist><their_age>25</their_age><their_job>they are a Singer</their_job><created>946684800</created></item>';
    $this->logVerboseResult($result, 'Actual result');
    $this->logVerboseResult($expected, 'Expected result');
    $this->assertEqual($result, $expected, 'The content is as expected.');

    // camelCase.
    $result = $this->executeFullWrite($this->getExporter(), $spaced_dataset, 0);
    $expected = '<item><nameOfArtist>John-Lennon</nameOfArtist><theirAge>25</theirAge><theirJob>they are a Singer</theirJob><created>946684800</created></item>';
    $this->logVerboseResult($result, 'Actual result');
    $this->logVerboseResult($expected, 'Expected result');
    $this->assertEqual($result, $expected, 'The content is as expected.');

    // PascalCase.
    // camelCase.
    $result = $this->executeFullWrite($this->getExporter(), $spaced_dataset, 0);
    $expected = '<item><NameOfArtist>John-Lennon</NameOfArtist><TheirAge>25</TheirAge><TheirJob>they are a Singer</TheirJob><created>946684800</created></item>';
    $this->logVerboseResult($result, 'Actual result');
    $this->logVerboseResult($expected, 'Expected result');
    $this->assertEqual($result, $expected, 'The content is as expected.');
  }

  protected function testRootNode() {
    $exporter = $this->getExporter(
      array(
        'field_labels' => array('name','age','job','created',),
        'root_node' => 'test_document_root',
      )
    );
    $BOF = $this->executeBOF($exporter);
    $BOF = '';
    $expect = '<test_document_root>';
    $result = strpos($BOF, $expect) > -1;
    $this->logVerboseResult($BOF, 'Actual result');
    $this->logVerboseResult($expect, 'Expected to contain');
    $this->assertTrue($result, 'The Root Node is as expected.');
  }

  protected function testEntityEncode() {

  }

  protected function testCData() {
    $CDATA_dataset = array(
      array(
        'artist' => 'John',
        'illegal_content' => 'illegal XML characters < & >',
        'age' => 25,
        'job' => 'they are a Singer',
        'created' => gmmktime(0, 0, 0, 1, 1, 2000),
      ),
    );

    // Dash.
    $result = $this->executeFullWrite($this->getExporter(array(
      'cdata_wrapper' => array('illegal_content',),
    )), $CDATA_dataset, 0);
    $expected = '<item><illegal_content><![CDATA[illegal XML characters < & >]]></illegal_content></illegal_content><name-of-artist>John-Lennon</name-of-artist><their-age>25</their-age><their-job>they are a Singer</their-job><created>946684800</created></item>';
    $this->logVerboseResult($result, 'Actual result');
    $this->logVerboseResult($expected, 'Expected result');
    $this->assertEqual($result, $expected, 'The content is as expected.');


  }
}
